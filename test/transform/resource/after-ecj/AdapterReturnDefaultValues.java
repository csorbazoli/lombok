import lombok.experimental.Adapter;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
public class AdapterReturnDefaultValues {
  public static @Adapter(silent = true) class AdapterClass implements FooInterface {
    public AdapterClass() {
      super();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated void doNothing() {
      ;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated AdapterReturnDefaultValues.FooInterface fluentMethod(final java.lang.String input) {
      return this;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.String[] getArray() {
      return new java.lang.String[0];
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Boolean getBoolean() {
      return false;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Byte getByte() {
      return (byte) 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Character getChar() {
      return (char) 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.Collection<java.lang.String> getCollection() {
      return java.util.Collections.emptyList();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated AdapterReturnDefaultValues.CompoundValue getCompoundValue() {
      return null;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.ArrayList<java.lang.String> getConcreteList() {
      return new java.util.ArrayList();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Integer> getConcreteMap() {
      return new java.util.concurrent.ConcurrentHashMap();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Double getDouble() {
      return 0D;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Float getFloat() {
      return 0F;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Integer getInt() {
      return 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.Iterator<java.lang.String> getIterator() {
      return java.util.Collections.emptyIterator();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.List<java.lang.String> getList() {
      return java.util.Collections.emptyList();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.ListIterator<java.lang.String> getListIterator() {
      return java.util.Collections.emptyListIterator();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Long getLong() {
      return 0L;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.Map<java.lang.String, java.lang.Integer> getMap() {
      return java.util.Collections.emptyMap();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.NavigableMap<java.lang.String, java.lang.Integer> getNavigableMap() {
      return java.util.Collections.emptyNavigableMap();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.NavigableSet<java.lang.String> getNavigableSet() {
      return java.util.Collections.emptyNavigableSet();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.Map<java.lang.String, java.util.List<java.lang.String>> getNestedCollection() {
      return java.util.Collections.emptyMap();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.List getNonGenericList() {
      return java.util.Collections.emptyList();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.Optional<java.lang.String> getOptional() {
      return java.util.Optional.empty();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated boolean getPrimitiveBoolean() {
      return (boolean) false;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated byte getPrimitiveByte() {
      return (byte) 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated char getPrimitiveChar() {
      return (char) 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated double getPrimitiveDouble() {
      return (double) 0D;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated float getPrimitiveFloat() {
      return (float) 0F;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated int getPrimitiveInt() {
      return 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated long getPrimitiveLong() {
      return (long) 0L;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated short getPrimitiveShort() {
      return (short) 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.Set<java.lang.String> getSet() {
      return java.util.Collections.emptySet();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.Short getShort() {
      return (short) 0;
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.SortedMap<java.lang.String, java.lang.Integer> getSortedMap() {
      return java.util.Collections.emptySortedMap();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.util.SortedSet<java.lang.String> getSortedSet() {
      return java.util.Collections.emptySortedSet();
    }
    public @java.lang.SuppressWarnings("all") @lombok.Generated java.lang.String getStatusString() {
      return null;
    }
  }
  public static interface FooInterface {
    int getPrimitiveInt();
    byte getPrimitiveByte();
    char getPrimitiveChar();
    double getPrimitiveDouble();
    short getPrimitiveShort();
    long getPrimitiveLong();
    float getPrimitiveFloat();
    boolean getPrimitiveBoolean();
    Integer getInt();
    Byte getByte();
    Character getChar();
    Double getDouble();
    Short getShort();
    Long getLong();
    Float getFloat();
    Boolean getBoolean();
    String[] getArray();
    Collection<String> getCollection();
    List<String> getList();
    Set<String> getSet();
    Map<String, Integer> getMap();
    SortedSet<String> getSortedSet();
    SortedMap<String, Integer> getSortedMap();
    Optional<String> getOptional();
    List getNonGenericList();
    ArrayList<String> getConcreteList();
    ConcurrentHashMap<String, Integer> getConcreteMap();
    Map<String, List<String>> getNestedCollection();
    NavigableSet<String> getNavigableSet();
    NavigableMap<String, Integer> getNavigableMap();
    Iterator<String> getIterator();
    ListIterator<String> getListIterator();
    String getStatusString();
    CompoundValue getCompoundValue();
    FooInterface fluentMethod(String input);
    void doNothing();
  }
  public static class CompoundValue {
    private String string;
    private Integer number;
    public CompoundValue() {
      super();
    }
  }
  public AdapterReturnDefaultValues() {
    super();
  }
}
